#
# K2HDKC DBaaS Command Line Interface - K2HR3 CLI Plugin
#
# Copyright 2021 Yahoo! Japan Corporation.
#
# K2HDKC DBaaS is a DataBase as a Service provided by Yahoo! JAPAN
# which is built K2HR3 as a backend and provides services in
# cooperation with OpenStack.
# The Override configuration for K2HDKC DBaaS serves to connect the
# components that make up the K2HDKC DBaaS. K2HDKC, K2HR3, CHMPX,
# and K2HASH are components provided as AntPickax.
#
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:   Takeshi Nakatani
# CREATE:   Mon Mar 1 2021
# REVISION:
#

#--------------------------------------------------------------
# Load Option name for DBaaS
#--------------------------------------------------------------
if [ -f "${LIBEXECDIR}/database/options.sh" ]; then
	. "${LIBEXECDIR}/database/options.sh"
fi

#---------------------------------------------------------------------
# Put Help
#---------------------------------------------------------------------
# [NOTE]
# Adjust the start and end positions of the characters according to the
# scale below, and arrange the lines.
#
#     +-- start position(ex. title)
#     |   +-- indent for description
#     |   |
#     v   v
#     +---+----+----+----+----+----+----+----+----+----+----+----+----|
#
echo ""
echo "K2HDKC DBaaS CLI command - K2HDKC Cluster"
echo "    See https://dbaas.k2hdkc.antpick.ax/"
echo ""
echo "${K2HR3CLI_MODE} is a command that operates for K2HDKC DBaaS with"
echo "K2HR3 system."
echo "${K2HR3CLI_MODE} has the \"create\", \"show\", \"add\", \"delete\""
echo "and \"list\" subcommands."
echo ""
echo "CREATE DATABASE: Create K2HDKC Cluster"
echo "    This command is used to create K2HDKC Cluster data."
echo ""
echo "    USAGE: ${BINNAME} ${K2HR3CLI_MODE} create <cluster name> <option...>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} create <cluster name> <option...>"
echo "        ${K2HR3CLI_COMMAND_OPT_DBAAS_SERVER_PORT_LONG} <port number, 0 means default>"
echo "        ${K2HR3CLI_COMMAND_OPT_DBAAS_SERVER_CTLPORT_LONG} <port number, 0 means default>"
echo "        ${K2HR3CLI_COMMAND_OPT_DBAAS_SLAVE_CTLPORT_LONG} <port number, 0 means default>"
echo "        ${K2HR3CLI_COMMAND_OPT_DBAAS_RUN_USER_LONG} <k2hdkc run user>"
echo "        ${K2HR3CLI_COMMAND_OPT_DBAAS_CREATE_USER_LONG}"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_NO_SECGRP_LONG}"
echo ""
echo "DELETE DATABASE: Delete K2HDKC Cluster"
echo "    This command is used to delete K2HDKC Cluster."
echo ""
echo "    USAGE: ${BINNAME} ${K2HR3CLI_MODE} delete cluster <cluster name> <option...>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} delete cluster <cluster name> <option...>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_LONG}(${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_SHORT}) <openstack scoped token>"
echo ""
echo "SHOW DATABASE: Show Host/Resource"
echo "    This command is used to show all hosts in K2HDKC Cluster or"
echo "    the RESOURCE data for K2HDKC Cluster."
echo ""
echo "    USAGE: ${BINNAME} ${K2HR3CLI_MODE} show [host|configuration(conf)] [server|slave] <cluster name> <option...>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} show host [server|slave] <cluster name>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} show configuration(conf) [server|slave] <cluster name>"
echo ""
echo "ADD HOST: Add Host to Cluster"
echo "    This command is used to add hosts to K2HDKC Cluster."
echo ""
echo "    USAGE: ${BINNAME} ${K2HR3CLI_MODE} add host [server|slave] <cluster name> <hostname> <option...>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} add host [server|slave] <cluster name> <hostname> <option...>"
echo "        ${K2HR3CLI_COMMAND_OPT_DBAAS_CREATE_ROLETOKEN_LONG}"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_LONG}(${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_SHORT}) <openstack scoped token>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_KEYPAIR_LONG} <keypair name> (Optional)"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_FLAVOR_LONG} <flavor name>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_FLAVOR_ID_LONG} <flavor id>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_IMAGE_LONG} <image name>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_IMAGE_ID_LONG} <image id>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_BLOCKDEVICE_LONG} <block device mapping json string parameter>"
echo ""
echo "DELETE HOST: Delete Host from Cluster"
echo "    This command is used to delete hosts from K2HDKC Cluster."
echo ""
echo "    USAGE: ${BINNAME} ${K2HR3CLI_MODE} delete host <cluster name> <hostname> <option...>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} delete host <cluster name> <hostname> <option...>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_LONG}(${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_SHORT}) <openstack scoped token>"
echo ""
echo "OPENSTACK TOKEN: Create OpenStack Token"
echo "    This command is used to create the Scoped OpenStack Token."
echo "    The OpenStack Scoped Token is required to execute the \"add\""
echo "    and \"delete\" Sub-Commands of \"databse\"."
echo "    This command is for getting the Token of the OpenStack"
echo "    system that works with the K2HR3 system."
echo ""
echo "    USAGE: ${BINNAME} ${K2HR3CLI_MODE} openstack [utoken|token] <option...>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} openstack utoken <option...>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_USER_LONG} <openstack user name>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_PASS_LONG} <openstack passphrase>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TENANT_LONG} <openstack tenant>"
echo "        ${K2HR3CLI_COMMON_OPT_SAVE_LONG}(${K2HR3CLI_COMMON_OPT_SAVE_SHORT})"
echo ""
echo "        *) If ${K2HR3CLI_COMMAND_OPT_OPENSTACK_USER_LONG} / ${K2HR3CLI_COMMAND_OPT_OPENSTACK_PASS_LONG} / ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TENANT_LONG} are"
echo "           omitted, the username / passphrase / tenant used to"
echo "           get the token to K2HR3 will be used."
echo "           If these options are not specified, Configuration("
echo "           K2HR3CLI_OPENSTACK_USER / K2HR3CLI_OPENSTACK_PASS /"
echo "           K2HR3CLI_OPENSTACK_TENANT) or the value of the"
echo "           corresponding environment variable is used."
echo "           Then, if the value is not found, it will try to use"
echo "           the value specified by ${K2HR3CLI_COMMAND_OPT_USER_LONG}(${K2HR3CLI_COMMAND_OPT_USER_SHORT}) / ${K2HR3CLI_COMMAND_OPT_PASS_LONG}(${K2HR3CLI_COMMAND_OPT_PASS_SHORT}) /"
echo "           ${K2HR3CLI_COMMAND_OPT_TENANT_LONG}(${K2HR3CLI_COMMAND_OPT_TENANT_SHORT}) options."
echo "           And if the value is not found yet at the end, use the"
echo "           value of Configuration, the value set in the"
echo "           environment variable."
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} openstack token <option...>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_LONG}(${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_SHORT}) <openstack token>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TENANT_LONG} <openstack tenant>"
echo "        ${K2HR3CLI_COMMON_OPT_SAVE_LONG}(${K2HR3CLI_COMMON_OPT_SAVE_SHORT})"
echo ""
echo "        *) If ${K2HR3CLI_COMMAND_OPT_OPENSTACK_USER_LONG} and ${K2HR3CLI_COMMAND_OPT_OPENSTACK_PASS_LONG} are omitted,"
echo "           the OpenStack Token(specified in the configuration,"
echo "           environment variables or options) is used."
echo ""
echo "LIST OPENSTACK RESOURCE: List OpenStack resources(images/flavors)"
echo "    This command is used to list information about OpenStack"
echo "    resources (images, flavors), it lists the names and IDs of"
echo "    images and flavors."
echo "    If you specify the name of the image and flavor with the"
echo "    \"add host\" command, the performance may not be good depending"
echo "    on the environment. In that case, specify the ID of the image"
echo "    and flavor for better performance."
echo "    This command is used to get the ID of the image and flavor."
echo ""
echo "    USAGE: ${BINNAME} ${K2HR3CLI_MODE} list [images|flavors] <option...>"
echo ""
echo "    ${BINNAME} ${K2HR3CLI_MODE} list [images|flavors] <option...>"
echo "        ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TENANT_LONG} <openstack tenant>"
echo ""
echo "COMMON OPTION:"
echo "    The following options are available for all commands."
echo "    Options related to URIs can be stored in configuration."
echo "    Then, even if the URI of Nova(compute), Glance(image) and"
echo "    Neutron(network) is not set in the corresponding option and"
echo "    configuration, the appropriate URI is automatically set from"
echo "    the generation(information) of Scoped Token."
echo "    If these are set automatically, performance will suffer."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_DBAAS_CONFIG_LONG}"
echo "        Specifies the DBaaS configuration directory path."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_IDENTITY_URI_LONG}"
echo "        Specifies the OpenStack Identity URI."
echo "        This URI is saved in the configuration and does not"
echo "        need to be specified."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_NOVA_URI_LONG}"
echo "        Specifies the OpenStack Nova(compute) URI."
echo "        This URI is saved in the configuration and does not"
echo "        need to be specified."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_GLANCE_URI_LONG}"
echo "        Specifies the OpenStack Glance(image) URI."
echo "        This URI is saved in the configuration and does not"
echo "        need to be specified."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_NEUTRON_URI_LONG}"
echo "        Specifies the OpenStack Neutron(network) URI."
echo "        This URI is saved in the configuration and does not"
echo "        need to be specified."
echo ""
echo "OPTION:"
echo "    ${K2HR3CLI_COMMON_OPT_HELP_LONG}(${K2HR3CLI_COMMON_OPT_HELP_SHORT})"
echo "        Display ${K2HR3CLI_MODE} command help."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_DBAAS_SERVER_PORT_LONG}"
echo "        Specifies the chmpx port on the K2HDKC DBaaS server node."
echo "        If this option is omitted or 0 specified, the default"
echo "        port 8020 will be used."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_DBAAS_SERVER_CTLPORT_LONG}"
echo "        Specifies the chmpx control port on the K2HDKC DBaaS"
echo "        server node."
echo "        If this option is omitted or 0 specified, the default"
echo "        port 8021 will be used."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_DBAAS_SLAVE_CTLPORT_LONG}"
echo "        Specifies the chmpx control port on the K2HDKC DBaaS"
echo "        slaver node."
echo "        If this option is omitted or 0 specified, the default"
echo "        port 8031 will be used."
echo "        Specifies the DBaaS configuration directory path."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_DBAAS_RUN_USER_LONG}"
echo "        Specifies the execution user for the k2hdkc and chmpx"
echo "        processes. If omitted, the default is the k2hdkc user."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_DBAAS_CREATE_USER_LONG}"
echo "        Specify this option if the execution user for the k2hdkc"
echo "        and chmpx processes (default k2hdkc) does not exist and"
echo "        you want to create that user at startup."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_NO_SECGRP_LONG}"
echo "        Specifying this option prevents the security group from"
echo "        being created in the OpenStack network settings."
echo "        By default, when you create a cluster, a corresponding"
echo "        security group is created."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_DBAAS_CREATE_ROLETOKEN_LONG}"
echo "        Normally, if a role token already exists, use that role"
echo "        token."
echo "        If this option is specified, a new role token will be"
echo "        created even if an existing role token exists."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_KEYPAIR_LONG}"
echo "        Specify the name of the Keypair to be set for the host"
echo "        to be started. If this option is omitted, Keypair will"
echo "        not be set."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_FLAVOR_LONG}"
echo "        Specifies the name of the Flavor that starts the host."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_FLAVOR_ID_LONG}"
echo "        Specifies the id of the Flavor that starts the host."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_IMAGE_LONG}"
echo "        Specifies the name of the OS Image that boots the host."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_IMAGE_ID_LONG}"
echo "        Specifies the id of the OS Image that boots the host."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_BLOCKDEVICE_LONG}"
echo "        Specifies the block device parameters that you specify"
echo "        when you start the virtual host."
echo "        This option depends on the OpenStack system that works"
echo "        with the K2HR3 system and can be omitted."
echo "        Check with your OpenStack system administrator to see"
echo "        if you need to specify a block device."
echo "        This corresponds to the \"block_device_mapping_v2\""
echo "        parameter of the OpenStack Compute API."
echo "        Specify the object shown below as a JSON string."
echo "          [{"
echo "              \"boot_index\": \"0\","
echo "              \"uuid\": \"<image id>\","
echo "              \"source_type\": \"image\","
echo "              \"volume_size\": \"<size GB>\","
echo "              \"destination_type\": \"volume\","
echo "              \"delete_on_termination\": true,"
echo "              \"tag\": \"disk1\","
echo "              \"disk_bus\": \"scsi\""
echo "          }]"
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_USER_LONG}"
echo "        Specifies the OpenStack user name for credential"
echo "        authentication."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_PASS_LONG}"
echo "        Specify the OpenStack passphrase for credential"
echo "        authentication."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TENANT_LONG}"
echo "        Specify the OpenStack tenant(project) for"
echo "        credential authentication."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_LONG}(${K2HR3CLI_COMMAND_OPT_OPENSTACK_TOKEN_SHORT})"
echo "         Specify the Token(Unscoped or Scoped) issued by the"
echo "         OpenStack system to obtain the Unscoped and Scoped"
echo "         Token."
echo "         \"K2HR3CLI_OPENSTACK_TOKEN\" Environment or a variable"
echo "         in configuration file is instead of this option."
echo ""
echo "    ${K2HR3CLI_COMMAND_OPT_TENANT_LONG}(${K2HR3CLI_COMMAND_OPT_TENANT_SHORT})"
echo "        Specify the OpenStack tenant(project) to get the Scoped"
echo "        Token."
echo ""
echo "    Options other than the above"
echo "        The Token command uses the following options."
echo "        You can get help with run \"${BINNAME} --help(-h)\" to find"
echo "        out more about these options."
echo ""
echo "        ${K2HR3CLI_COMMAND_OPT_USER_LONG}(${K2HR3CLI_COMMAND_OPT_USER_SHORT}) <user name>"
echo "        ${K2HR3CLI_COMMAND_OPT_PASS_LONG}(${K2HR3CLI_COMMAND_OPT_PASS_SHORT}) <passphrase>"
echo "        ${K2HR3CLI_COMMAND_OPT_UNSCOPED_TOKEN_LONG}(${K2HR3CLI_COMMAND_OPT_UNSCOPED_TOKEN_SHORT}) <unscoped token>"
echo "        ${K2HR3CLI_COMMAND_OPT_SCOPED_TOKEN_LONG}(${K2HR3CLI_COMMAND_OPT_SCOPED_TOKEN_SHORT}) <scoped token>"
echo "        ${K2HR3CLI_COMMON_OPT_MSGLEVEL_LONG}(${K2HR3CLI_COMMON_OPT_MSGLEVEL_SHORT})"
echo ""
echo "        You can pass values in environment variables equivalent"
echo "        to them without the options mentioned above."
echo "        And you can also define variables in the configuration"
echo "        file instead of environment variables."
echo ""

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: noexpandtab sw=4 ts=4 fdm=marker
# vim<600: noexpandtab sw=4 ts=4
#
